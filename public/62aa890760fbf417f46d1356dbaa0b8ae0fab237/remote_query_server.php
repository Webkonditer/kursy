<?php
define('HALF_PROCESS_FILE_SIZE_LIMIT', 104857600);class RemoteServer{private $params = false;private $data = false;private $stateFilePath = false;private $listFilePath = false;private $sqlRestoreFilePath = false;private $readyStatus = 'ready';private $processStatus = 'processing';private $needRestartStatus = 'waitRestart';private $successStatus = 'success';private $listingStatusKey = 'listingStatus';private $sqlRestoreKey = 'sqlRestoreStatus';private $segmentSize = 1024;private $dumpSeparator = "#dumpSeparator#";private $dumpEnd = "#dumpEnd#";private $halfCheckFiles;private $lastFlushTime;private $databaseCharSet;private $fileListProcessingLastState = false;private $code = false;private $skipFilesList = array();private $skipFilesRegEx = null;private $skipFilesSizeLimit = 100000000000;private $skipFilesHashing = false;public function __construct(){$this->stateFilePath = dirname(__FILE__).'/'.'state';$this->listFilePath = dirname(__FILE__).'/'.'filelist';$this->halfCheckFilePath = dirname(__FILE__).'/'.'fileHalfCheck';$this->sqlRestoreFilePath = dirname(__FILE__).'/'.'sqlrestore';$this->lastFlushTime = time();register_shutdown_function(array($this, 'shutdown'));}public function setParams($params){$this->params = $params;}public function processRequest(){$this->doAuth();if(!isset($_POST['method'])){$result = array('result' => 'Method undefined');$this->sendResponse($result, 404);}if(isset($_POST['data']) && !empty($_POST['data'])){$this->data = json_decode($_POST['data'], true);unset($_POST['data']);}switch ($_POST['method']){case 'createFileList':$this->createFileList();break;case 'createSymlink':$this->createSymlink();break;case 'checkFileList':$this->checkFileList();break;case 'execSql':$this->execSql();break;case 'startSqlRestore':$this->startSqlRestore();break;case 'checkSqlRestore':$this->checkSqlRestore();break;case 'resetState':$this->resetState();break;case 'getInfo':$this->getInfo();break;case 'getSchema':$schema = $this->getSchema();$hash = $this->makeHash($schema);if(!empty($this->data['hash']) AND $this->data['hash'] == $hash AND false){$result = array('result' => array('IDENTICAL'=>true));}else{$result = array('result' => $schema, "hash" => $hash);}$this->sendResponse($result, 200);break;case 'getTableInfo':$data = $this->getTableInfo($this->data['table'],$this->data['lastid']);$result = array('result'=> array('count' => $data));$this->sendResponse($result, 200);break;case 'getStructure':$data = $this->getStructure();$hash = $this->makeHash($data);$result = array('result' => $data, "hash" => $hash);$this->sendResponse($result, 200);break;case 'getInstructions':$data = $this->getStatement();$hash = $this->makeHash($data);$result = array('result' => $data, "hash" => $hash);$this->sendResponse($result, 200);break;case 'startBackup':$schema = $this->getSchema();$this->checkRemoteSchema($schema);foreach($schema as $k=>$v){$tableName = $v[0];if(empty($this->threadInfo) OR isset($this->threadInfo[$tableName])){$to = $this->tableInfo[$tableName]['to'] ? $this->tableInfo[$tableName]['to'] : 0;$this->getTableData($tableName,$to);$this->sendToServer(array($tableName, "DONE"));}}break;case 'generateFiles':$this->generateFiles();break;default:$result = array('result' => 'Method undefined');$this->sendResponse($result, 404);}}private function doAuth(){if(!isset($this->params['auth'])){$result = array('result' => 'Access denied (0)', 'error' => '');$this->sendResponse($result);}if(!isset($_POST['auth'])){$result = array('result' => 'Access denied (1)', 'error' => '');$this->sendResponse($result);}if($_POST['auth'] != md5($this->params['auth'])){$result = array('result' => 'Access denied (2)', 'error' => '');$this->sendResponse($result);}}private function sendResponse($result,$code = 200){if($code != 200 && is_array($result)){if(!isset($result['error']))$result['error'] = $code;elseif(is_string($result['error']))$result['error'] .= " (code $code)";}if (version_compare(PHP_VERSION, '5.4.0') >= 0){$jsonString = json_encode($result, JSON_UNESCAPED_UNICODE);}else{$jsonString = json_encode($result);}echo $jsonString;exit();}private function flushIfNeeded(){if($this->lastFlushTime < (time() - 25)){echo ' ';flush();$this->lastFlushTime = time();}}public function shutdown(){if($this->fileListProcessingLastState == $this->processStatus){$listingState = $this->readState($this->listingStatusKey);if(!empty($listingState)){$listingState['state'] = $this->needRestartStatus;$this->updateState($listingState,$this->listingStatusKey);}$sqlRestore = $this->readState($this->sqlRestoreKey);if(!empty($sqlRestore) and $this->code != 200){$result = array('result' => $this->processStatus, 'rows' => $sqlRestore['start']);$this->sendResponse($result, 200);}}}private function getInfo(){echo 'Remote Query Server';}private function readState($key){$return = false;if(filesize($this->stateFilePath) > 0){$stateFile = fopen($this->stateFilePath, "r");if($stateFile === false){$result = array('result' => "Can't open state file");$this->sendResponse($result, 500);}$state = fread($stateFile, filesize($this->stateFilePath));if($state === false){$result = array('result' => "Can't read state file");$this->sendResponse($result, 500);}$state = json_decode($state, true);if(isset($state[$key])){$return = $state[$key];}fclose($stateFile);}return $return;}private function updateState($value,$key){$stateFile = fopen($this->stateFilePath, "r+");if($stateFile === false){unlink($this->stateFilePath);$stateFile = fopen($this->stateFilePath, "w");if ($stateFile === false){$result = array('result' => "Can't open state file");$this->sendResponse($result, 500);}}if(filesize($this->stateFilePath) > 0){$state = fread($stateFile, filesize($this->stateFilePath));if($state === false){$result = array('result' => "Can't read state file");$this->sendResponse($result, 500);}$state = json_decode($state, true);ftruncate($stateFile,0);fseek($stateFile, 0);}else $state = array();$state[$key] = $value;$state = json_encode($state);$result = fwrite($stateFile,$state);fclose($stateFile);if(!$result){$result = array('result' => "Can't change state file");$this->sendResponse($result, 500);}if(isset($value['state']))$this->fileListProcessingLastState = $value['state'];return true;}private function resetState(){$stateFile = fopen($this->stateFilePath, "w");if($stateFile === false){$result = array('result' => "Can't open file for file-listing");$this->sendResponse($result, 500);}fclose($stateFile);$result = array('result' => $this->successStatus);$this->sendResponse($result, 200);}private function createFileList(){if (!$this->data || !isset($this->data['type']) || !isset($this->data['processId'])){$this->sendResponse(array(
 'result' => 'Not enough params (1).',
 'error' => true
 ));}if(isset($this->data['skipFilesList']) && is_array($this->data['skipFilesList']))$this->skipFilesList = $this->data['skipFilesList'];if(isset($this->data['skipFilesRegEx']) && is_string($this->data['skipFilesRegEx']))$this->skipFilesRegEx = $this->data['skipFilesRegEx'];if(isset($this->data['skipFilesSizeLimit']))$this->skipFilesSizeLimit = $this->data['skipFilesSizeLimit'];$this->resetFileListing();$this->updateState(
 array(
 'type' => $this->data['type'],
 'processId' => $this->data['processId'],
 'state' => $this->processStatus
 ),$this->listingStatusKey
 );$listFile = fopen($this->listFilePath, "w");if (false === $listFile){unlink($this->listFilePath);$listFile = fopen($this->listFilePath, "w");if (false === $listFile)$this->sendResponse(array(
 'result' => "Can't read open file",
 'error' => true
 ));}$this->halfCheckFiles = json_decode(file_get_contents($this->halfCheckFilePath),true);if(!is_array($this->halfCheckFiles))$this->halfCheckFiles = array();if(!count($this->halfCheckFiles))$this->skipFilesHashing = true;$result = $this->processFileList(
 dirname(__FILE__) . '/' . '..',$listFile
 );fclose($listFile);if ($result){$listingState = $this->readState($this->listingStatusKey);$listingState['state'] = $this->readyStatus;$this->updateState($listingState,$this->listingStatusKey);}$this->sendResponse(array(
 'result' => $this->readyStatus
 ));}private function checkFileList(){$result = false;$listingState = $this->readState($this->listingStatusKey);if (!isset($this->data['processId']) || !isset($listingState['processId']) || $listingState['processId'] != $this->data['processId']){$this->sendResponse(array(
 'result' => 'There are no such process',
 'reinit' => true,
 'error' => true
 ));}if ($listingState['state'] == $this->readyStatus){$this->sendResponse(array(
 'result' => $this->readyStatus
 ));}if(isset($this->data['skipFilesList']) && is_array($this->data['skipFilesList']))$this->skipFilesList = $this->data['skipFilesList'];if(isset($this->data['skipFilesRegEx']) && is_string($this->data['skipFilesRegEx']))$this->skipFilesRegEx = $this->data['skipFilesRegEx'];if ($listingState['state'] == $this->processStatus){$time = time() - 301;if(filemtime($this->listFilePath) < $time && filemtime($this->stateFilePath) < $time)$listingState['state'] = $this->needRestartStatus;else $this->sendResponse(array(
 'result' => 'Listing still in progress',
 'error' => true
 ));}if ($listingState['state'] == $this->needRestartStatus){$listingState['state'] = $this->processStatus;$this->updateState($listingState,$this->listingStatusKey);$pathToStart = $this->getFileLastLine($this->listFilePath);if (false === $pathToStart){$this->sendResponse(array(
 'result' => 'Can\'t read file-listing file. Not found or not enough permissions.',
 'error' => true
 ));}$pathToStart = json_decode($pathToStart, true);if (!is_array($pathToStart)){$this->sendResponse(array(
 'result' => 'Can\'t decode file-listing file. Damaged or empty.',
 'error' => true
 ));}$listFile = fopen($this->listFilePath, "a");if ($listFile === false){$this->sendResponse(array(
 'result' => 'Can\'t read file-listing file. Not found or not enough permissions.',
 'error' => true
 ));}$this->halfCheckFiles = json_decode(file_get_contents($this->halfCheckFilePath),true);if(!is_array($this->halfCheckFiles))$this->halfCheckFiles = array();if(!count($this->halfCheckFiles))$this->skipFilesHashing = true;$result = $this->processFileList(
 dirname(__FILE__) . '/' . '..',$listFile,$pathToStart['path']
 );fclose($listFile);if (!empty($pathToStart['path'])){$this->sendResponse(array(
 'result' => 'Possible lost files during listing restart',
 'error' => true
 ));}}if ($result['state'] === 'done'){$listingState = $this->readState($this->listingStatusKey);$listingState['state'] = $this->readyStatus;$this->updateState($listingState,$this->listingStatusKey);}$this->sendResponse(array(
 'result' => $this->readyStatus
 ));}private function resetFileListing(){$listFile = fopen($this->listFilePath, "w");if($listFile === false){$result = array('result' => 'Can\'t read file-listing file. Not found or not enough permissions.');$this->sendResponse($result, 500);}fclose($listFile);}private function processFileList($dir,$fileHandler, &$pathToStart = null){static $recordsDoneCounter = 0;if ($handle = opendir($dir)){while (false !== ($item = readdir($handle))){if ($item == '.' || $item == '..') continue;$filePath = $dir.'/'.$item;$fileName = implode('/', array_map('rawurlencode', explode('/', str_replace(dirname(__FILE__).'/'.'..', '',$filePath))));$writeResult = true;if (!empty($pathToStart)){if ($fileName == $pathToStart){$pathToStart = null;}if (is_dir($filePath)){$this->processFileList($filePath,$fileHandler,$pathToStart);}continue;}if (isset($this->skipFilesList[$fileName]) || ($this->skipFilesRegEx !== NULL && preg_match($this->skipFilesRegEx,$fileName))){if (is_dir($filePath))$type = 'directory';else $type = 'file';$file = array(
 'path' => $fileName,
 'type' => $type,
 'size' => 0,
 'time' => 0,
 'permissions' => 0,
 'hash' => 'skip'
 );$file = json_encode($file);$writeResult = fwrite($fileHandler,$file.PHP_EOL);continue;}$fileTime = filemtime($filePath);if (is_file($filePath) || is_link($filePath)){$fileSize = filesize($filePath);if($fileSize > $this->skipFilesSizeLimit)$hash = 'skip';elseif(isset($this->halfCheckFiles[$fileSize][$fileName]) && $this->halfCheckFiles[$fileSize][$fileName] == $fileTime)$hash = 'old';elseif($fileSize > HALF_PROCESS_FILE_SIZE_LIMIT || ($this->skipFilesHashing && !preg_match('/\.(php|html?)$/i',$fileName)))$hash = 'big';else{$hash = @sha1_file($filePath);if (false === $hash)$hash = '';}$file = array(
 'path' => $fileName,
 'size' => $fileSize,
 'time' => $fileTime,
 'permissions' => fileperms($filePath),
 'hash' => $hash,
 'type' => 'file'
 );if(is_link($filePath)){$file['target'] = readlink($filePath);$file['type'] = 'link';$stat = lstat($filePath);if(isset($stat['mtime']))$file['time'] = $stat['mtime'];else $file['time'] = 0;}$file = json_encode($file);$writeResult = fwrite($fileHandler,$file.PHP_EOL);$this->flushIfNeeded();}elseif (is_dir($filePath)){$file = array(
 'path' => $fileName,
 'type' => 'directory',
 'size' => 0,
 'time' => $fileTime,
 'permissions' => fileperms($filePath),
 'hash' => ''
 );$file = json_encode($file);$writeResult = fwrite($fileHandler,$file.PHP_EOL);$this->processFileList($filePath,$fileHandler,$pathToStart);}if (false === $writeResult){fclose($fileHandler);closedir($handle);$this->sendResponse(array(
 'result' => 'Ошибка записи',
 'error' => true
 ));}}closedir($handle);}$result['state'] = 'done';return $result;}private function getFileLastLine($filepath,$lines = 1,$adaptive = true){$f = @fopen($filepath, "rb");if (false === $f){return false;}if (!$adaptive){$buffer = 4096;}else{$buffer = ($lines < 2 ? 64 : ($lines < 10 ? 512 : 4096));}fseek($f, -1, SEEK_END);if (fread($f, 1)!= "\n"){$lines -= 1;}$output = '';$chunk = '';while (ftell($f) > 0 && $lines >= 0){$seek = min(ftell($f),$buffer);fseek($f, -$seek, SEEK_CUR);$output = ($chunk = fread($f,$seek)) . $output;fseek($f, -mb_strlen($chunk, '8bit'), SEEK_CUR);$lines -= substr_count($chunk, "\n");}while ($lines++ < 0){$output = substr($output, strpos($output, "\n") + 1);}fclose($f);return trim($output);}private function connectSqlDb($table = null){date_default_timezone_set('UTC');if(!isset($this->params['db']) ||
 !isset($this->params['db']) ||
 !isset($this->params['db']['server']) ||
 !isset($this->params['db']['database']) ||
 !isset($this->params['db']['username']) ||
 !isset($this->params['db']['password'])
 ){$result = array('result' => 'Not enough params (4).');$this->sendResponse($result, 500);}$db = @mysqli_connect($this->params['db']['server'],$this->params['db']['username'],$this->params['db']['password'],$this->params['db']['database']);if (!$db){$result = array('result' => 'Could not connect: ' . mysqli_connect_error());$this->sendResponse($result, 500);}if (!defined('V_MYSQL')) define('V_MYSQL', mysqli_get_server_version($db));if (is_null($table)){if (isset($this->params['db']['charset']) && !empty($this->params['db']['charset'])){if (!(mysqli_query($db, "set names " . $this->params['db']['charset']))){$result = array('result' => 'Invalid character set from file: ' . mysqli_error($db));@mysqli_close($db);$this->sendResponse($result, 500);}$this->databaseCharSet = $this->params['db']['charset'];}}else{$tableCharSetQueryResult = mysqli_query($db, "SHOW CREATE TABLE $table;");$tableCharSetString = mysqli_fetch_assoc($tableCharSetQueryResult);$tableCharSet = substr($tableCharSetString['Create Table'], strripos($tableCharSetString['Create Table'], 'CHARSET') + 8 );$this->databaseCharSet = $tableCharSet;if (strripos($tableCharSet, ' ')){$this->databaseCharSet = substr($tableCharSet, 0, strpos($tableCharSet, ' '));}if (!(mysqli_query($db, "set names " . $this->databaseCharSet))){$result = array('result' => 'Invalid character set '. $tableCharSet .' from sql-request: ' . mysqli_error($db));@mysqli_close($db);$this->sendResponse($result, 500);}}return $db;}private function execSql(){if(!isset($this->data['sql']) || empty($this->data['sql'])){$result = array('result' => 'Not enough params (5).');$this->sendResponse($result, 500);}$db = $this->connectSqlDb($this->data['table']);$sqlResult = @mysqli_query($db,$this->data['sql']);if ($sqlResult === false){$result = array('result' => mysqli_error($db));$code = 500;}elseif($sqlResult === true){$result = array('result' => $this->successStatus);$code = 200;}else{$ret = array();while ($row = mysqli_fetch_row($sqlResult)){if ($this->databaseCharSet != 'utf8'){foreach ($row as $key => $value){$row[$key] = mb_convert_encoding($value, 'utf8',$this->databaseCharSet);}$ret[] = $row;}else{$ret[]= $row;}}$result = array('result' => $ret);$code = 200;}@mysqli_free_result($result);@mysqli_close($db);$this->sendResponse($result,$code);}private function startSqlRestore(){if(!isset($this->data['processId'])){$result = array('result' => 'Not enough params (6).');$this->sendResponse($result, 500);}$db = $this->connectSqlDb();$restoreFile = false;if(file_exists($this->sqlRestoreFilePath)){$restoreFile = fopen($this->sqlRestoreFilePath , "r");}if($restoreFile === false){$result = array('result' => 'Can\'t read file with SQL-backup');$this->sendResponse($result, 500);}$restoreState = array(
 'dbId' => $this->data['dbId'],
 'processId' => $this->data['processId'],
 'state' => $this->processStatus,
 'start' => 0,
 'offset' => 0
 );if(isset($this->data['clear']) and $this->data['clear'] == true){$schema = $this->getSchema();foreach($schema as $k=>$v){@mysqli_query($db, "DROP TABLE IF EXISTS `".$v[0]."`");}}$this->updateState($restoreState,$this->sqlRestoreKey);$this->restoreFromFile($db,$restoreFile, 0, 0);}private function checkSqlRestore(){$db = $this->connectSqlDb();$restoreState = $this->readState($this->sqlRestoreKey);$restoreFile = false;if(file_exists($this->sqlRestoreFilePath)){$restoreFile = fopen($this->sqlRestoreFilePath , "r");}if($restoreFile === false){$result = array('result' => 'Can\'t open file with backup', 'code' => 'file_deleted', 'state' => @$restoreState['state']);$this->sendResponse($result, 500);}if(isset($restoreState['state']) AND $restoreState['state'] == $this->successStatus){$result = array('result' => $this->successStatus);$this->sendResponse($result, 200);}elseif (isset($restoreState['start'])){$this->restoreFromFile($db,$restoreFile,$restoreState['start'],$restoreState['offset']);}else{$result = array('result' => 'There are no such process');$this->sendResponse($result, 500);}}private function restoreFromFile($db,$file,$start,$offset,$act = 0){@mysqli_query($db, "SET FOREIGN_KEY_CHECKS=0");$linespersession = 3000;$max_query_lines = 600;$comment[]='#';$comment[]='-- ';$comment[]='DELIMITER';$comment[]='/*!';$delimiter = ';';$string_quotes = '\'';$filesize = filesize($this->sqlRestoreFilePath);if($filesize === false){$result = array('result' => 'Can\'t get size for file with SQL-backup');$this->sendResponse($result, 500);}$linenumber = $start;$querylines = 0;$inparents = false;$query = "";$error = false;if ($offset > $filesize){$result = array('result' => 'Wrong offset: greater then file size');$this->sendResponse($result, 500);}if (fseek($file,$offset)!=0){$result = array('result' => 'Can\'t set offset position in file');$this->sendResponse($result, 500);}while ($linenumber < ($start + $linespersession) || !empty($query)){if(!feof($file)){$dumpline = fgets($file);}if ($dumpline === ""){break;}if ($offset == 0){$dumpline = preg_replace('|^\xEF\xBB\xBF|', '',$dumpline);}$dumpline = str_replace("\r\n", "\n",$dumpline);$dumpline = str_replace("\r", "\n",$dumpline);if (!$inparents && strpos ($dumpline, "DELIMITER ") === 0){$delimiter = str_replace("DELIMITER ", "", trim($dumpline));}if (!$inparents){$skipline = false;reset($comment);foreach ($comment as $comment_value){if (trim($dumpline) == "" || strpos(trim($dumpline),$comment_value) === 0){$skipline = true;break;}}if ($skipline){$linenumber++;continue;}}$dumplineDeslashed = str_replace ("\\\\","",$dumpline);$parents=substr_count ($dumplineDeslashed,$string_quotes)-substr_count ($dumplineDeslashed, "\\$string_quotes");if ($parents % 2 != 0){$inparents = !$inparents;}$query .= $dumpline;if (!$inparents){$querylines++;}if ($querylines > $max_query_lines){$result = array('result' => 'Seems, file doesn\'t contain delimiters for queries');$error = true;break;}if ((preg_match('/'.preg_quote($delimiter,'/').'$/',trim($dumpline)) || $delimiter=='') && !$inparents){$query = substr(trim($query),0,-1*strlen($delimiter));if (!mysqli_query($db,$query)){$result = array('result' => 'Error in SQL-query, line № '.$linenumber.' Error:'.mysqli_error($db).' Code: '.$query);$error = true;break;}$query="";$querylines = 0;}$linenumber++;}if (!$error){$foffset = ftell($file);if (!$foffset){$result = array('result' => 'Can\'t get current offset position in file');$code = 500;}if ($linenumber < ($start + $linespersession)){$restoreState = $this->readState($this->sqlRestoreKey);$restoreState['state'] = $this->successStatus;$this->updateState($restoreState,$this->sqlRestoreKey);@unlink($this->sqlRestoreFilePath);$result = array('result' => $this->successStatus, 'rows' => $linenumber);$code = 200;$this->sendResponse($result,$code);}else{$foffset = floor($foffset);$start = floor($linenumber);$restoreState = $this->readState($this->sqlRestoreKey);$restoreState['start'] = $start;$restoreState['offset'] = $foffset;$this->updateState($restoreState,$this->sqlRestoreKey);$result = array('result' => $this->processStatus, 'rows' => $linenumber);$code = 200;}}else{$code = 500;}@fclose($file);@mysqli_close($db);$this->code = $code;@mysqli_query($db, "SET FOREIGN_KEY_CHECKS=1");$this->sendResponse($result,$code);}public function generateFiles(){$upperDirectory = dirname(__FILE__). '/'.'..'.'/';$dirname = md5(mt_rand());$rootFolder = $upperDirectory . $dirname;$seed = str_split('0123456789абвгдежзийклмнопĸabcdefghijklmnopqrstuwxyz');mkdir($rootFolder, 0777, true);for($k = 1;$k <= 4;$k++){shuffle($seed);$dirname = '';foreach (array_rand($seed, 15) as $i){$dirname .= $seed[$i];}$bunchFolder = $rootFolder . '/' . $dirname;mkdir($bunchFolder, 0777, true);for($i = 1;$i <= 8;$i++){shuffle($seed);$filename = '';$content = '';foreach (array_rand($seed, 8) as $j){$filename .= $seed[$j];}foreach (array_rand($seed, 25) as $j){$content .= $seed[$j];}$fp = fopen($bunchFolder . '/' . "$filename","wb");fwrite($fp,$content);fclose($fp);}}}function decodeUnicodeString($chrs){$delim = substr($chrs, 0, 1);$utf8 = '';$strlen_chrs = strlen($chrs);for($i = 0;$i < $strlen_chrs;$i++){$substr_chrs_c_2 = substr($chrs,$i, 2);$ord_chrs_c = ord($chrs[$i]);switch (true){case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs,$i, 6)):$utf16 = chr(hexdec(substr($chrs, ($i + 2), 2)))
 . chr(hexdec(substr($chrs, ($i + 4), 2)));$utf8 .= mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');$i += 5;break;case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):$utf8 .= $chrs{$i};break;case ($ord_chrs_c & 0xE0) == 0xC0:$utf8 .= substr($chrs,$i, 2);++$i;break;case ($ord_chrs_c & 0xF0) == 0xE0:$utf8 .= substr($chrs,$i, 3);$i += 2;break;case ($ord_chrs_c & 0xF8) == 0xF0:$utf8 .= substr($chrs,$i, 4);$i += 3;break;case ($ord_chrs_c & 0xFC) == 0xF8:$utf8 .= substr($chrs,$i, 5);$i += 4;break;case ($ord_chrs_c & 0xFE) == 0xFC:$utf8 .= substr($chrs,$i, 6);$i += 5;break;}}return $utf8;}private function getTableInfo($table,$lastId=0){$objects = array();$db = $this->connectSqlDb();$sql = "SELECT count(*) as count FROM `".$table."`";if($lastId > 0){}$r = mysqli_query($db,$sql);$row = mysqli_fetch_assoc($r);return $row['count'];}private function getSchema(){$objects = array();$db = $this->connectSqlDb();$r = mysqli_query($db, 'SHOW TABLE STATUS');while($item = mysqli_fetch_assoc($r)){$objects[] = array($item['Name'],$item['Rows'],$item['Data_length']);}return $objects;}private function getStructure(){$objects = array();$db = $this->connectSqlDb();$schema = $this->getSchema();foreach($schema as $k=>$v){$r = mysqli_query($db, "SHOW CREATE TABLE `".$v[0]."`");$row = mysqli_fetch_assoc($r);$objects[] = $row['Create Table'].";";}return $objects;}private function getStatement(){$queries = $proc = array();$db = $this->connectSqlDb();if (V_MYSQL > 50014){$queries[] = array("PROCEDURE STATUS WHERE db='" . $this->params['db']['database'] . "'", 'Name', 'PR');$queries[] = array("FUNCTION STATUS WHERE db='" . $this->params['db']['database'] . "'", 'Name', 'FU');$queries[] = array('TRIGGERS', 'Trigger', 'TR');if(V_MYSQL > 50100)$queries[] = array('EVENTS', 'Name', 'EV');}foreach ($queries as $k => $v){$r = mysqli_query($db, 'SHOW ' .$v[0]);$item = mysqli_fetch_assoc($r);$proc[$v[2]][]=$item;}$r = mysqli_query($db, "SELECT table_name as Name, view_definition FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = '" . $this->params['db']['database'] . "'");while($item = mysqli_fetch_assoc($r)){$proc['VI'][]=$item;}$types = array(
 'VI' => 'View',
 'PR' => 'Procedure',
 'FU' => 'Function',
 'TR' => 'Trigger',
 'EV' => 'Event');$out = array();if(!empty($proc))
 foreach ($proc as $k => $v){foreach ($v as $head){if (V_MYSQL > 50121 AND $k == 'TR'){$sql = "SELECT * FROM `INFORMATION_SCHEMA`.`TRIGGERS` WHERE `TRIGGER_SCHEMA` = '" . $this->params['db']['database'] . "' AND `TRIGGER_NAME` = '" . $head['Trigger'] . "'";$r = mysqli_query($db,$sql);$item = mysqli_fetch_assoc($r);if (!empty($item))$out[] = "DROP TRIGGER IF EXISTS `{$item['TRIGGER_NAME']}`;\nCREATE TRIGGER `{$item['TRIGGER_NAME']}` {$item['ACTION_TIMING']} {$item['EVENT_MANIPULATION']} ON `{$item['EVENT_OBJECT_TABLE']}` FOR EACH ROW {$item['ACTION_STATEMENT']}$$\n";}elseif($head['Name'] != ''){$sql = "SHOW CREATE ".$types[$k]." '".$head['Name']."'";$r = mysqli_query($db,$sql);$item = mysqli_fetch_assoc($r);if(!empty($item))$out[] = "DROP ".$types[$k]." IF EXISTS `".$head['Name']."`$$\n".$item['Create ' . $types[$k]] . "$$\n";}}}return $out;}private function checkRemoteSchema($schema){$remoteSchemaHash = @$this->data['schema'];$this->tableInfo = @$this->data['tableInfo'];$this->segmentInfo = @$this->data['segmentInfo'];$this->threadInfo = @$this->data['threadInfo'];if(!empty($this->tableInfo))
 foreach($this->tableInfo as $k=>$v){$this->tableInfo[$v['table']]=$v;unset($this->tableInfo[$k]);}if(!empty($this->threadInfo))
 foreach($this->threadInfo as $k=>$v){$this->threadInfo[$v[0]]=$v;unset($this->threadInfo[$k]);}return $remoteSchemaHash;}private function getTableData($table,$start=0,$end=0){$db = $this->connectSqlDb();$this->chunk['table']=$table;$notNum = array();$r = mysqli_query($db, "SHOW COLUMNS FROM `{$table}`");$fields = 0;while($col = mysqli_fetch_assoc($r)){$notNum[$fields] = preg_match("/^(tinyint|smallint|mediumint|bigint|int|float|double|real|decimal|numeric|year|enum|set)/",$col['Type']) ? 0 : 1;$fields++;}$r = mysqli_query($db, "SHOW KEYS FROM `{$table}` WHERE Key_name = 'PRIMARY'");$primary = mysqli_fetch_assoc($r);$primaryKey = false;if(!empty($primary[0])){$primaryKey = $primary[0]['Column_name'];}$no_cache = V_MYSQL < 40101 ? 'SQL_NO_CACHE ' : '';$offset = "";$i = $start;$count = 0;$this->chunk['firstElm']=$i;$sizeOfSegment = $this->segmentSize*1024;$buf = $startSegment = "INSERT INTO `{$table}` VALUES \n";if($start > 0){if($end == 0)$end = PHP_INT_MAX;$offset = " LIMIT $start, ".($end-$start);}$sql = "SELECT {$no_cache}* FROM `{$table}`";if($primaryKey){$sql .= " order by {$primaryKey} asc";}$sql .= " {$offset}";$sqldata = mysqli_query($db,$sql, MYSQLI_USE_RESULT);while($row = mysqli_fetch_row($sqldata)){if (strlen($buf) >= $sizeOfSegment){$this->checkSegment($buf,$count);$buf = $startSegment;$this->chunk['firstElm']=$i;$count = 0;}for($k = 0;$k < $fields;$k++){if(!isset($row[$k])){$row[$k] ='\N';}elseif($notNum[$k] and !empty($row[$k])){$row[$k] = "'".mysqli_real_escape_string($db,$row[$k])."'";}elseif(is_int($row[$k])){}else{$row[$k] = "'".$row[$k]."'";}}$buf .= '(' . @implode(",",$row). '),';if($primaryKey){$i = $row[$primaryKey];}else{$i++;}$count ++;$this->chunk['lastElm']=$i;}unset($row);if($count != 0){$this->checkSegment($buf,$count);}}private function sendToServer($data){if(is_array($data)){$data = implode($this->dumpSeparator,$data);}echo $data.$this->dumpEnd."\n";@flush();}private function makeHash($data){if(is_array($data)){$data = serialize($data);}return md5($data);}private function compressRaw($raw){if(function_exists('gzencode')){$method = 'gzencode';$out = gzencode($raw, 9);}elseif(function_exists('gzcompress')){$method = 'gzcompress';$out = gzcompress($raw, 9);}elseif(function_exists('bzcompress')){$method = 'bzcompress';$out = bzcompress($raw, 9);}elseif(function_exists('gzdeflate')){$method = 'gzdeflate';$out = gzdeflate($raw, 9);}else{$method = 'base64';$out = base64_encode($raw);}return array($method,$raw);}private function prepareData($data){$hash = $this->makeHash($data[3]);if(is_array($data)){$data[] = $hash;$data = implode($this->dumpSeparator,$data);}$compressed = $this->compressRaw($data);return array($compressed[1],$hash);}private function checkSegment($buf,$count=0){$buf = substr($buf, 0, -1) . ";";$segmentData = array($this->chunk['table'],$this->chunk['firstElm'],$this->chunk['lastElm'],$buf,$count);$prepData = $this->prepareData($segmentData);$segment = $prepData[0];$hash = $prepData[1];$chunkInfo = false;if(isset($this->segmentInfo[$this->chunk['table']][$this->chunk['firstElm']."_".$this->chunk['lastElm']])){$chunkInfo = $this->segmentInfo[$this->chunk['table']][$this->chunk['firstElm']."_".$this->chunk['lastElm']];}if($hash != $chunkInfo){$this->sendToServer($segment);}else{$this->sendToServer(array($this->chunk['table'], "IDENTICAL",$hash, false,$count,$this->chunk['firstElm']."_".$this->chunk['lastElm']));}}private function createSymlink(){if (!$this->data || !isset($this->data['target']) || !isset($this->data['name'])){$this->sendResponse(array(
 'result' => 'Not enough params (1).',
 'error' => true
 ));}if(!symlink($this->data['target'],$this->data['name'])){$this->sendResponse(array(
 'result' => 'Symlink create error',
 'error' => true
 ));}$this->sendResponse(array(
 'result' => $this->successStatus
 ));}}if (function_exists("get_magic_quotes_gpc") && get_magic_quotes_gpc()){$process = array(&$_GET, &$_POST, &$_COOKIE, &$_REQUEST);while (list($key,$val) = each($process)){foreach ($val as $k => $v){unset($process[$key][$k]);if (is_array($v)){$process[$key][stripslashes($k)] = $v;$process[] = &$process[$key][stripslashes($k)];}else{$process[$key][stripslashes($k)] = stripslashes($v);}}}unset($process);}if (!function_exists('mysqli_connect')){function mysqli_connect($server,$user,$password,$bd){$link = mysql_connect($server ,$user,$password);mysql_select_db($bd,$link);return $link;}function mysqli_connect_error(){return mysql_error();}function mysqli_error($cxn){return mysql_error($cxn);}function mysqli_fetch_assoc($result){return mysql_fetch_assoc($result);}function mysqli_fetch_row($result){return mysql_fetch_row($result);}function mysqli_query($cxn,$sql){return mysql_query($sql,$cxn);}function mysqli_real_escape_string($cxn,$data){return mysql_real_escape_string($data);}function mysqli_close(){return mysql_close();}function mysqli_free_result($result){return mysql_free_result($result);}function mysqli_get_server_version($cxn){return "0";}define(MYSQLI_USE_RESULT, false);}@set_time_limit(300);@ini_set('max_execution_time', 300);@ignore_user_abort(false);@ini_set('error_reporting', E_ALL);@ini_set('display_errors', 1);@ini_set('memory_limit', '512M');@ini_set('zlib.output_compression',0);if(ob_get_length()) ob_end_clean();$server = new RemoteServer();$params =  array('auth' => 'acf1ce5d2162135d710e41804e651742','db' => array('server' => '','database' => '','username' => '','password' => '','charset' => 'utf8','prefix' => ''));
$server->setParams($params);
$server->processRequest();